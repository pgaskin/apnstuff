// https://cs.android.com/android/platform/superproject/+/android14-qpr3-release:tools/carrier_settings/proto/carrier_settings.proto

//
// Copyright (C) 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v3.19.6
// source: carrier_settings.proto

package carriersettings

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Next two fields type and bearer_bitmask affect how APN is selected by
// platform. eg. type means APN capability and bearer_bitmask specifies
// which RATs apply.
// Note mcc/mnc and mvno data doesn't belong to this proto because they
// define a carrier.
// APN types as defined in Android code PhoneConstants.java
type ApnItem_ApnType int32

const (
	ApnItem_ALL       ApnItem_ApnType = 0 // this APN can serve all kinds of data connections
	ApnItem_DEFAULT   ApnItem_ApnType = 1 // internet data
	ApnItem_MMS       ApnItem_ApnType = 2
	ApnItem_SUPL      ApnItem_ApnType = 3
	ApnItem_DUN       ApnItem_ApnType = 4
	ApnItem_HIPRI     ApnItem_ApnType = 5
	ApnItem_FOTA      ApnItem_ApnType = 6
	ApnItem_IMS       ApnItem_ApnType = 7
	ApnItem_CBS       ApnItem_ApnType = 8
	ApnItem_IA        ApnItem_ApnType = 9 // Initial attach
	ApnItem_EMERGENCY ApnItem_ApnType = 10
	ApnItem_XCAP      ApnItem_ApnType = 11
	ApnItem_UT        ApnItem_ApnType = 12
	ApnItem_RCS       ApnItem_ApnType = 13
)

// Enum value maps for ApnItem_ApnType.
var (
	ApnItem_ApnType_name = map[int32]string{
		0:  "ALL",
		1:  "DEFAULT",
		2:  "MMS",
		3:  "SUPL",
		4:  "DUN",
		5:  "HIPRI",
		6:  "FOTA",
		7:  "IMS",
		8:  "CBS",
		9:  "IA",
		10: "EMERGENCY",
		11: "XCAP",
		12: "UT",
		13: "RCS",
	}
	ApnItem_ApnType_value = map[string]int32{
		"ALL":       0,
		"DEFAULT":   1,
		"MMS":       2,
		"SUPL":      3,
		"DUN":       4,
		"HIPRI":     5,
		"FOTA":      6,
		"IMS":       7,
		"CBS":       8,
		"IA":        9,
		"EMERGENCY": 10,
		"XCAP":      11,
		"UT":        12,
		"RCS":       13,
	}
)

func (x ApnItem_ApnType) Enum() *ApnItem_ApnType {
	p := new(ApnItem_ApnType)
	*p = x
	return p
}

func (x ApnItem_ApnType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ApnItem_ApnType) Descriptor() protoreflect.EnumDescriptor {
	return file_carrier_settings_proto_enumTypes[0].Descriptor()
}

func (ApnItem_ApnType) Type() protoreflect.EnumType {
	return &file_carrier_settings_proto_enumTypes[0]
}

func (x ApnItem_ApnType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ApnItem_ApnType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ApnItem_ApnType(num)
	return nil
}

// Deprecated: Use ApnItem_ApnType.Descriptor instead.
func (ApnItem_ApnType) EnumDescriptor() ([]byte, []int) {
	return file_carrier_settings_proto_rawDescGZIP(), []int{2, 0}
}

// Protocols allowed to connect to the APN.
type ApnItem_Protocol int32

const (
	ApnItem_IP     ApnItem_Protocol = 0
	ApnItem_IPV6   ApnItem_Protocol = 1
	ApnItem_IPV4V6 ApnItem_Protocol = 2
	ApnItem_PPP    ApnItem_Protocol = 3
)

// Enum value maps for ApnItem_Protocol.
var (
	ApnItem_Protocol_name = map[int32]string{
		0: "IP",
		1: "IPV6",
		2: "IPV4V6",
		3: "PPP",
	}
	ApnItem_Protocol_value = map[string]int32{
		"IP":     0,
		"IPV6":   1,
		"IPV4V6": 2,
		"PPP":    3,
	}
)

func (x ApnItem_Protocol) Enum() *ApnItem_Protocol {
	p := new(ApnItem_Protocol)
	*p = x
	return p
}

func (x ApnItem_Protocol) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ApnItem_Protocol) Descriptor() protoreflect.EnumDescriptor {
	return file_carrier_settings_proto_enumTypes[1].Descriptor()
}

func (ApnItem_Protocol) Type() protoreflect.EnumType {
	return &file_carrier_settings_proto_enumTypes[1]
}

func (x ApnItem_Protocol) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ApnItem_Protocol) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ApnItem_Protocol(num)
	return nil
}

// Deprecated: Use ApnItem_Protocol.Descriptor instead.
func (ApnItem_Protocol) EnumDescriptor() ([]byte, []int) {
	return file_carrier_settings_proto_rawDescGZIP(), []int{2, 1}
}

// The skip 464xlat flag. Flag works as follows.
// SKIP_464XLAT_DEFAULT: the APN will skip 464xlat only if the APN has type
//
//	IMS and does not support INTERNET which has type
//	DEFAULT or HIPRI.
//
// SKIP_464XLAT_DISABLE: the APN will NOT skip 464xlat
// SKIP_464XLAT_ENABLE: the APN will skip 464xlat
type ApnItem_Xlat int32

const (
	ApnItem_SKIP_464XLAT_DEFAULT ApnItem_Xlat = 0
	ApnItem_SKIP_464XLAT_DISABLE ApnItem_Xlat = 1
	ApnItem_SKIP_464XLAT_ENABLE  ApnItem_Xlat = 2
)

// Enum value maps for ApnItem_Xlat.
var (
	ApnItem_Xlat_name = map[int32]string{
		0: "SKIP_464XLAT_DEFAULT",
		1: "SKIP_464XLAT_DISABLE",
		2: "SKIP_464XLAT_ENABLE",
	}
	ApnItem_Xlat_value = map[string]int32{
		"SKIP_464XLAT_DEFAULT": 0,
		"SKIP_464XLAT_DISABLE": 1,
		"SKIP_464XLAT_ENABLE":  2,
	}
)

func (x ApnItem_Xlat) Enum() *ApnItem_Xlat {
	p := new(ApnItem_Xlat)
	*p = x
	return p
}

func (x ApnItem_Xlat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ApnItem_Xlat) Descriptor() protoreflect.EnumDescriptor {
	return file_carrier_settings_proto_enumTypes[2].Descriptor()
}

func (ApnItem_Xlat) Type() protoreflect.EnumType {
	return &file_carrier_settings_proto_enumTypes[2]
}

func (x ApnItem_Xlat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ApnItem_Xlat) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ApnItem_Xlat(num)
	return nil
}

// Deprecated: Use ApnItem_Xlat.Descriptor instead.
func (ApnItem_Xlat) EnumDescriptor() ([]byte, []int) {
	return file_carrier_settings_proto_rawDescGZIP(), []int{2, 2}
}

// Settings of one carrier, including apns and configs
// This is the payload to be delivered from server
type CarrierSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A unique canonical carrier name
	CanonicalName *string `protobuf:"bytes,1,opt,name=canonical_name,json=canonicalName" json:"canonical_name,omitempty"`
	// Version number of current carrier’s settings
	Version *int64 `protobuf:"varint,2,opt,name=version" json:"version,omitempty"`
	// Carrier APNs
	Apns *CarrierApns `protobuf:"bytes,3,opt,name=apns" json:"apns,omitempty"`
	// Carrier configs
	Configs *CarrierConfig `protobuf:"bytes,4,opt,name=configs" json:"configs,omitempty"`
	// Vendor carrier configs
	VendorConfigs *VendorConfigs `protobuf:"bytes,6,opt,name=vendor_configs,json=vendorConfigs" json:"vendor_configs,omitempty"`
}

func (x *CarrierSettings) Reset() {
	*x = CarrierSettings{}
	mi := &file_carrier_settings_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CarrierSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CarrierSettings) ProtoMessage() {}

func (x *CarrierSettings) ProtoReflect() protoreflect.Message {
	mi := &file_carrier_settings_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CarrierSettings.ProtoReflect.Descriptor instead.
func (*CarrierSettings) Descriptor() ([]byte, []int) {
	return file_carrier_settings_proto_rawDescGZIP(), []int{0}
}

func (x *CarrierSettings) GetCanonicalName() string {
	if x != nil && x.CanonicalName != nil {
		return *x.CanonicalName
	}
	return ""
}

func (x *CarrierSettings) GetVersion() int64 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

func (x *CarrierSettings) GetApns() *CarrierApns {
	if x != nil {
		return x.Apns
	}
	return nil
}

func (x *CarrierSettings) GetConfigs() *CarrierConfig {
	if x != nil {
		return x.Configs
	}
	return nil
}

func (x *CarrierSettings) GetVendorConfigs() *VendorConfigs {
	if x != nil {
		return x.VendorConfigs
	}
	return nil
}

// A collection of multiple carriers’ settings
type MultiCarrierSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Version number
	Version *int64 `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	// List of CarrierSettings
	Setting []*CarrierSettings `protobuf:"bytes,2,rep,name=setting" json:"setting,omitempty"`
}

func (x *MultiCarrierSettings) Reset() {
	*x = MultiCarrierSettings{}
	mi := &file_carrier_settings_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MultiCarrierSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiCarrierSettings) ProtoMessage() {}

func (x *MultiCarrierSettings) ProtoReflect() protoreflect.Message {
	mi := &file_carrier_settings_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiCarrierSettings.ProtoReflect.Descriptor instead.
func (*MultiCarrierSettings) Descriptor() ([]byte, []int) {
	return file_carrier_settings_proto_rawDescGZIP(), []int{1}
}

func (x *MultiCarrierSettings) GetVersion() int64 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

func (x *MultiCarrierSettings) GetSetting() []*CarrierSettings {
	if x != nil {
		return x.Setting
	}
	return nil
}

// An access point name (aka. APN) entry
type ApnItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of APN, map to xml apn "carrier" attribute
	// eg. Verizon Internet, may visible to user in Settings
	Name *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// The value of APN, eg. send to modem for data call. map to xml
	// "apn" attribute, eg. vzwinternet
	Value *string           `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	Type  []ApnItem_ApnType `protobuf:"varint,3,rep,name=type,enum=com.google.carrier.ApnItem_ApnType" json:"type,omitempty"`
	// Network types that this APN applies to, separated by "|". A network type
	// is represented as an integer defined in TelephonyManager.NETWORK_TYPE_*.
	// Default value "0" means all network types.
	BearerBitmask *string `protobuf:"bytes,4,opt,name=bearer_bitmask,json=bearerBitmask,def=0" json:"bearer_bitmask,omitempty"`
	// Below are all parameters for the APN
	// APN server / auth parameters.
	Server   *string `protobuf:"bytes,5,opt,name=server" json:"server,omitempty"`
	Proxy    *string `protobuf:"bytes,6,opt,name=proxy" json:"proxy,omitempty"`
	Port     *string `protobuf:"bytes,7,opt,name=port" json:"port,omitempty"`
	User     *string `protobuf:"bytes,8,opt,name=user" json:"user,omitempty"`
	Password *string `protobuf:"bytes,9,opt,name=password" json:"password,omitempty"`
	Authtype *int32  `protobuf:"varint,10,opt,name=authtype,def=-1" json:"authtype,omitempty"`
	// MMS configuration.
	Mmsc            *string           `protobuf:"bytes,11,opt,name=mmsc" json:"mmsc,omitempty"`
	MmscProxy       *string           `protobuf:"bytes,12,opt,name=mmsc_proxy,json=mmscProxy" json:"mmsc_proxy,omitempty"`
	MmscProxyPort   *string           `protobuf:"bytes,13,opt,name=mmsc_proxy_port,json=mmscProxyPort" json:"mmsc_proxy_port,omitempty"`
	Protocol        *ApnItem_Protocol `protobuf:"varint,14,opt,name=protocol,enum=com.google.carrier.ApnItem_Protocol,def=0" json:"protocol,omitempty"`
	RoamingProtocol *ApnItem_Protocol `protobuf:"varint,15,opt,name=roaming_protocol,json=roamingProtocol,enum=com.google.carrier.ApnItem_Protocol,def=0" json:"roaming_protocol,omitempty"`
	// MTU for the connections.
	Mtu *int32 `protobuf:"varint,16,opt,name=mtu,def=0" json:"mtu,omitempty"`
	// An ID used to sync the APN in modem.
	ProfileId *int32 `protobuf:"varint,17,opt,name=profile_id,json=profileId" json:"profile_id,omitempty"`
	// Max connections.
	MaxConns *int32 `protobuf:"varint,18,opt,name=max_conns,json=maxConns,def=0" json:"max_conns,omitempty"`
	// The wait time required between disconnecting and connecting, in seconds.
	WaitTime *int32 `protobuf:"varint,19,opt,name=wait_time,json=waitTime,def=0" json:"wait_time,omitempty"`
	// The time to limit max connection, in seconds.
	MaxConnsTime *int32 `protobuf:"varint,20,opt,name=max_conns_time,json=maxConnsTime,def=0" json:"max_conns_time,omitempty"`
	// Whether to be persisted to modem.
	ModemCognitive *bool `protobuf:"varint,22,opt,name=modem_cognitive,json=modemCognitive,def=0" json:"modem_cognitive,omitempty"`
	// Whether visible in APN settings.
	UserVisible *bool `protobuf:"varint,23,opt,name=user_visible,json=userVisible,def=1" json:"user_visible,omitempty"`
	// Whether editable in APN settings.
	UserEditable *bool `protobuf:"varint,24,opt,name=user_editable,json=userEditable,def=1" json:"user_editable,omitempty"`
	// If > 0: when an APN becomes a preferred APN on user/framework
	// selection, other APNs with the same apn_set_id will also be preferred
	// by framework when selecting APNs.
	ApnSetId     *int32        `protobuf:"varint,25,opt,name=apn_set_id,json=apnSetId,def=0" json:"apn_set_id,omitempty"`
	Skip_464Xlat *ApnItem_Xlat `protobuf:"varint,26,opt,name=skip_464xlat,json=skip464xlat,enum=com.google.carrier.ApnItem_Xlat,def=0" json:"skip_464xlat,omitempty"`
}

// Default values for ApnItem fields.
const (
	Default_ApnItem_BearerBitmask   = string("0")
	Default_ApnItem_Authtype        = int32(-1)
	Default_ApnItem_Protocol        = ApnItem_IP
	Default_ApnItem_RoamingProtocol = ApnItem_IP
	Default_ApnItem_Mtu             = int32(0)
	Default_ApnItem_MaxConns        = int32(0)
	Default_ApnItem_WaitTime        = int32(0)
	Default_ApnItem_MaxConnsTime    = int32(0)
	Default_ApnItem_ModemCognitive  = bool(false)
	Default_ApnItem_UserVisible     = bool(true)
	Default_ApnItem_UserEditable    = bool(true)
	Default_ApnItem_ApnSetId        = int32(0)
	Default_ApnItem_Skip_464Xlat    = ApnItem_SKIP_464XLAT_DEFAULT
)

func (x *ApnItem) Reset() {
	*x = ApnItem{}
	mi := &file_carrier_settings_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApnItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApnItem) ProtoMessage() {}

func (x *ApnItem) ProtoReflect() protoreflect.Message {
	mi := &file_carrier_settings_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApnItem.ProtoReflect.Descriptor instead.
func (*ApnItem) Descriptor() ([]byte, []int) {
	return file_carrier_settings_proto_rawDescGZIP(), []int{2}
}

func (x *ApnItem) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ApnItem) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

func (x *ApnItem) GetType() []ApnItem_ApnType {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *ApnItem) GetBearerBitmask() string {
	if x != nil && x.BearerBitmask != nil {
		return *x.BearerBitmask
	}
	return Default_ApnItem_BearerBitmask
}

func (x *ApnItem) GetServer() string {
	if x != nil && x.Server != nil {
		return *x.Server
	}
	return ""
}

func (x *ApnItem) GetProxy() string {
	if x != nil && x.Proxy != nil {
		return *x.Proxy
	}
	return ""
}

func (x *ApnItem) GetPort() string {
	if x != nil && x.Port != nil {
		return *x.Port
	}
	return ""
}

func (x *ApnItem) GetUser() string {
	if x != nil && x.User != nil {
		return *x.User
	}
	return ""
}

func (x *ApnItem) GetPassword() string {
	if x != nil && x.Password != nil {
		return *x.Password
	}
	return ""
}

func (x *ApnItem) GetAuthtype() int32 {
	if x != nil && x.Authtype != nil {
		return *x.Authtype
	}
	return Default_ApnItem_Authtype
}

func (x *ApnItem) GetMmsc() string {
	if x != nil && x.Mmsc != nil {
		return *x.Mmsc
	}
	return ""
}

func (x *ApnItem) GetMmscProxy() string {
	if x != nil && x.MmscProxy != nil {
		return *x.MmscProxy
	}
	return ""
}

func (x *ApnItem) GetMmscProxyPort() string {
	if x != nil && x.MmscProxyPort != nil {
		return *x.MmscProxyPort
	}
	return ""
}

func (x *ApnItem) GetProtocol() ApnItem_Protocol {
	if x != nil && x.Protocol != nil {
		return *x.Protocol
	}
	return Default_ApnItem_Protocol
}

func (x *ApnItem) GetRoamingProtocol() ApnItem_Protocol {
	if x != nil && x.RoamingProtocol != nil {
		return *x.RoamingProtocol
	}
	return Default_ApnItem_RoamingProtocol
}

func (x *ApnItem) GetMtu() int32 {
	if x != nil && x.Mtu != nil {
		return *x.Mtu
	}
	return Default_ApnItem_Mtu
}

func (x *ApnItem) GetProfileId() int32 {
	if x != nil && x.ProfileId != nil {
		return *x.ProfileId
	}
	return 0
}

func (x *ApnItem) GetMaxConns() int32 {
	if x != nil && x.MaxConns != nil {
		return *x.MaxConns
	}
	return Default_ApnItem_MaxConns
}

func (x *ApnItem) GetWaitTime() int32 {
	if x != nil && x.WaitTime != nil {
		return *x.WaitTime
	}
	return Default_ApnItem_WaitTime
}

func (x *ApnItem) GetMaxConnsTime() int32 {
	if x != nil && x.MaxConnsTime != nil {
		return *x.MaxConnsTime
	}
	return Default_ApnItem_MaxConnsTime
}

func (x *ApnItem) GetModemCognitive() bool {
	if x != nil && x.ModemCognitive != nil {
		return *x.ModemCognitive
	}
	return Default_ApnItem_ModemCognitive
}

func (x *ApnItem) GetUserVisible() bool {
	if x != nil && x.UserVisible != nil {
		return *x.UserVisible
	}
	return Default_ApnItem_UserVisible
}

func (x *ApnItem) GetUserEditable() bool {
	if x != nil && x.UserEditable != nil {
		return *x.UserEditable
	}
	return Default_ApnItem_UserEditable
}

func (x *ApnItem) GetApnSetId() int32 {
	if x != nil && x.ApnSetId != nil {
		return *x.ApnSetId
	}
	return Default_ApnItem_ApnSetId
}

func (x *ApnItem) GetSkip_464Xlat() ApnItem_Xlat {
	if x != nil && x.Skip_464Xlat != nil {
		return *x.Skip_464Xlat
	}
	return Default_ApnItem_Skip_464Xlat
}

// A collection of all APNs for a carrier
type CarrierApns struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// APNs belong to this carrier
	Apn []*ApnItem `protobuf:"bytes,2,rep,name=apn" json:"apn,omitempty"`
}

func (x *CarrierApns) Reset() {
	*x = CarrierApns{}
	mi := &file_carrier_settings_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CarrierApns) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CarrierApns) ProtoMessage() {}

func (x *CarrierApns) ProtoReflect() protoreflect.Message {
	mi := &file_carrier_settings_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CarrierApns.ProtoReflect.Descriptor instead.
func (*CarrierApns) Descriptor() ([]byte, []int) {
	return file_carrier_settings_proto_rawDescGZIP(), []int{3}
}

func (x *CarrierApns) GetApn() []*ApnItem {
	if x != nil {
		return x.Apn
	}
	return nil
}

// An array of text
type TextArray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Item []string `protobuf:"bytes,1,rep,name=item" json:"item,omitempty"`
}

func (x *TextArray) Reset() {
	*x = TextArray{}
	mi := &file_carrier_settings_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TextArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextArray) ProtoMessage() {}

func (x *TextArray) ProtoReflect() protoreflect.Message {
	mi := &file_carrier_settings_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextArray.ProtoReflect.Descriptor instead.
func (*TextArray) Descriptor() ([]byte, []int) {
	return file_carrier_settings_proto_rawDescGZIP(), []int{4}
}

func (x *TextArray) GetItem() []string {
	if x != nil {
		return x.Item
	}
	return nil
}

// An array of int
type IntArray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Item []int32 `protobuf:"varint,1,rep,name=item" json:"item,omitempty"`
}

func (x *IntArray) Reset() {
	*x = IntArray{}
	mi := &file_carrier_settings_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IntArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntArray) ProtoMessage() {}

func (x *IntArray) ProtoReflect() protoreflect.Message {
	mi := &file_carrier_settings_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntArray.ProtoReflect.Descriptor instead.
func (*IntArray) Descriptor() ([]byte, []int) {
	return file_carrier_settings_proto_rawDescGZIP(), []int{5}
}

func (x *IntArray) GetItem() []int32 {
	if x != nil {
		return x.Item
	}
	return nil
}

// Carrier configs
type CarrierConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key-value pairs, holding all config entries
	Config []*CarrierConfig_Config `protobuf:"bytes,2,rep,name=config" json:"config,omitempty"`
}

func (x *CarrierConfig) Reset() {
	*x = CarrierConfig{}
	mi := &file_carrier_settings_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CarrierConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CarrierConfig) ProtoMessage() {}

func (x *CarrierConfig) ProtoReflect() protoreflect.Message {
	mi := &file_carrier_settings_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CarrierConfig.ProtoReflect.Descriptor instead.
func (*CarrierConfig) Descriptor() ([]byte, []int) {
	return file_carrier_settings_proto_rawDescGZIP(), []int{6}
}

func (x *CarrierConfig) GetConfig() []*CarrierConfig_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

// The configs of one vendor client.
type VendorConfigClient struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	// Name of the client for which the configuration items need to
	// be stored
	Name *string `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	// Binary blob containing the configuration. The format
	// of the configuration depends on the specific client.
	// For some clients, the proto representation of {@link VendorConfigData}
	// defined in vendorconfigdata.proto is used.
	Value []byte `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (x *VendorConfigClient) Reset() {
	*x = VendorConfigClient{}
	mi := &file_carrier_settings_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VendorConfigClient) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VendorConfigClient) ProtoMessage() {}

func (x *VendorConfigClient) ProtoReflect() protoreflect.Message {
	mi := &file_carrier_settings_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VendorConfigClient.ProtoReflect.Descriptor instead.
func (*VendorConfigClient) Descriptor() ([]byte, []int) {
	return file_carrier_settings_proto_rawDescGZIP(), []int{7}
}

func (x *VendorConfigClient) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *VendorConfigClient) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

// A collection of configs from vendor clients.
type VendorConfigs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Configuration
	Client []*VendorConfigClient `protobuf:"bytes,2,rep,name=client" json:"client,omitempty"`
}

func (x *VendorConfigs) Reset() {
	*x = VendorConfigs{}
	mi := &file_carrier_settings_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VendorConfigs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VendorConfigs) ProtoMessage() {}

func (x *VendorConfigs) ProtoReflect() protoreflect.Message {
	mi := &file_carrier_settings_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VendorConfigs.ProtoReflect.Descriptor instead.
func (*VendorConfigs) Descriptor() ([]byte, []int) {
	return file_carrier_settings_proto_rawDescGZIP(), []int{8}
}

func (x *VendorConfigs) GetClient() []*VendorConfigClient {
	if x != nil {
		return x.Client
	}
	return nil
}

// Key-Value pair as a config entry
type CarrierConfig_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key *string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	// Types that are assignable to Value:
	//
	//	*CarrierConfig_Config_TextValue
	//	*CarrierConfig_Config_IntValue
	//	*CarrierConfig_Config_LongValue
	//	*CarrierConfig_Config_BoolValue
	//	*CarrierConfig_Config_TextArray
	//	*CarrierConfig_Config_IntArray
	//	*CarrierConfig_Config_Bundle
	//	*CarrierConfig_Config_DoubleValue
	Value isCarrierConfig_Config_Value `protobuf_oneof:"value"`
}

func (x *CarrierConfig_Config) Reset() {
	*x = CarrierConfig_Config{}
	mi := &file_carrier_settings_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CarrierConfig_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CarrierConfig_Config) ProtoMessage() {}

func (x *CarrierConfig_Config) ProtoReflect() protoreflect.Message {
	mi := &file_carrier_settings_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CarrierConfig_Config.ProtoReflect.Descriptor instead.
func (*CarrierConfig_Config) Descriptor() ([]byte, []int) {
	return file_carrier_settings_proto_rawDescGZIP(), []int{6, 0}
}

func (x *CarrierConfig_Config) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (m *CarrierConfig_Config) GetValue() isCarrierConfig_Config_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *CarrierConfig_Config) GetTextValue() string {
	if x, ok := x.GetValue().(*CarrierConfig_Config_TextValue); ok {
		return x.TextValue
	}
	return ""
}

func (x *CarrierConfig_Config) GetIntValue() int32 {
	if x, ok := x.GetValue().(*CarrierConfig_Config_IntValue); ok {
		return x.IntValue
	}
	return 0
}

func (x *CarrierConfig_Config) GetLongValue() int64 {
	if x, ok := x.GetValue().(*CarrierConfig_Config_LongValue); ok {
		return x.LongValue
	}
	return 0
}

func (x *CarrierConfig_Config) GetBoolValue() bool {
	if x, ok := x.GetValue().(*CarrierConfig_Config_BoolValue); ok {
		return x.BoolValue
	}
	return false
}

func (x *CarrierConfig_Config) GetTextArray() *TextArray {
	if x, ok := x.GetValue().(*CarrierConfig_Config_TextArray); ok {
		return x.TextArray
	}
	return nil
}

func (x *CarrierConfig_Config) GetIntArray() *IntArray {
	if x, ok := x.GetValue().(*CarrierConfig_Config_IntArray); ok {
		return x.IntArray
	}
	return nil
}

func (x *CarrierConfig_Config) GetBundle() *CarrierConfig {
	if x, ok := x.GetValue().(*CarrierConfig_Config_Bundle); ok {
		return x.Bundle
	}
	return nil
}

func (x *CarrierConfig_Config) GetDoubleValue() float64 {
	if x, ok := x.GetValue().(*CarrierConfig_Config_DoubleValue); ok {
		return x.DoubleValue
	}
	return 0
}

type isCarrierConfig_Config_Value interface {
	isCarrierConfig_Config_Value()
}

type CarrierConfig_Config_TextValue struct {
	TextValue string `protobuf:"bytes,2,opt,name=text_value,json=textValue,oneof"`
}

type CarrierConfig_Config_IntValue struct {
	IntValue int32 `protobuf:"varint,3,opt,name=int_value,json=intValue,oneof"`
}

type CarrierConfig_Config_LongValue struct {
	LongValue int64 `protobuf:"varint,4,opt,name=long_value,json=longValue,oneof"`
}

type CarrierConfig_Config_BoolValue struct {
	BoolValue bool `protobuf:"varint,5,opt,name=bool_value,json=boolValue,oneof"`
}

type CarrierConfig_Config_TextArray struct {
	TextArray *TextArray `protobuf:"bytes,6,opt,name=text_array,json=textArray,oneof"`
}

type CarrierConfig_Config_IntArray struct {
	IntArray *IntArray `protobuf:"bytes,7,opt,name=int_array,json=intArray,oneof"`
}

type CarrierConfig_Config_Bundle struct {
	Bundle *CarrierConfig `protobuf:"bytes,8,opt,name=bundle,oneof"`
}

type CarrierConfig_Config_DoubleValue struct {
	DoubleValue float64 `protobuf:"fixed64,9,opt,name=double_value,json=doubleValue,oneof"`
}

func (*CarrierConfig_Config_TextValue) isCarrierConfig_Config_Value() {}

func (*CarrierConfig_Config_IntValue) isCarrierConfig_Config_Value() {}

func (*CarrierConfig_Config_LongValue) isCarrierConfig_Config_Value() {}

func (*CarrierConfig_Config_BoolValue) isCarrierConfig_Config_Value() {}

func (*CarrierConfig_Config_TextArray) isCarrierConfig_Config_Value() {}

func (*CarrierConfig_Config_IntArray) isCarrierConfig_Config_Value() {}

func (*CarrierConfig_Config_Bundle) isCarrierConfig_Config_Value() {}

func (*CarrierConfig_Config_DoubleValue) isCarrierConfig_Config_Value() {}

var File_carrier_settings_proto protoreflect.FileDescriptor

var file_carrier_settings_proto_rawDesc = []byte{
	0x0a, 0x16, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x22, 0x94, 0x02, 0x0a,
	0x0f, 0x43, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x12, 0x25, 0x0a, 0x0e, 0x63, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x61, 0x6e, 0x6f, 0x6e, 0x69,
	0x63, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x33, 0x0a, 0x04, 0x61, 0x70, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x61, 0x72,
	0x72, 0x69, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x41, 0x70, 0x6e, 0x73,
	0x52, 0x04, 0x61, 0x70, 0x6e, 0x73, 0x12, 0x3b, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x72,
	0x72, 0x69, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x73, 0x12, 0x48, 0x0a, 0x0e, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72,
	0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x52, 0x0d,
	0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x4a, 0x04, 0x08,
	0x05, 0x10, 0x06, 0x22, 0x6f, 0x0a, 0x14, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x43, 0x61, 0x72, 0x72,
	0x69, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x07, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x72, 0x72,
	0x69, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x07, 0x73, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x22, 0xe0, 0x09, 0x0a, 0x07, 0x41, 0x70, 0x6e, 0x49, 0x74, 0x65, 0x6d,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x37, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x2e, 0x41, 0x70,
	0x6e, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x41, 0x70, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x0e, 0x62, 0x65, 0x61, 0x72, 0x65, 0x72, 0x5f, 0x62, 0x69,
	0x74, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x3a, 0x01, 0x30, 0x52, 0x0d,
	0x62, 0x65, 0x61, 0x72, 0x65, 0x72, 0x42, 0x69, 0x74, 0x6d, 0x61, 0x73, 0x6b, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x6f, 0x72, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75,
	0x73, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12,
	0x1e, 0x0a, 0x08, 0x61, 0x75, 0x74, 0x68, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x05, 0x3a, 0x02, 0x2d, 0x31, 0x52, 0x08, 0x61, 0x75, 0x74, 0x68, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6d, 0x6d, 0x73, 0x63, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d,
	0x6d, 0x73, 0x63, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x6d, 0x73, 0x63, 0x5f, 0x70, 0x72, 0x6f, 0x78,
	0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x6d, 0x73, 0x63, 0x50, 0x72, 0x6f,
	0x78, 0x79, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x6d, 0x73, 0x63, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79,
	0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6d, 0x6d, 0x73,
	0x63, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x44, 0x0a, 0x08, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65,
	0x72, 0x2e, 0x41, 0x70, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x3a, 0x02, 0x49, 0x50, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x12, 0x53, 0x0a, 0x10, 0x72, 0x6f, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x2e,
	0x41, 0x70, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x3a, 0x02, 0x49, 0x50, 0x52, 0x0f, 0x72, 0x6f, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x13, 0x0a, 0x03, 0x6d, 0x74, 0x75, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x05, 0x3a, 0x01, 0x30, 0x52, 0x03, 0x6d, 0x74, 0x75, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x09, 0x6d, 0x61, 0x78,
	0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x30, 0x52,
	0x08, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x6e, 0x6e, 0x73, 0x12, 0x1e, 0x0a, 0x09, 0x77, 0x61, 0x69,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x30, 0x52,
	0x08, 0x77, 0x61, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0e, 0x6d, 0x61, 0x78,
	0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x05, 0x3a, 0x01, 0x30, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x6e, 0x6e, 0x73, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x0f, 0x6d, 0x6f, 0x64, 0x65, 0x6d, 0x5f, 0x63, 0x6f, 0x67, 0x6e,
	0x69, 0x74, 0x69, 0x76, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c,
	0x73, 0x65, 0x52, 0x0e, 0x6d, 0x6f, 0x64, 0x65, 0x6d, 0x43, 0x6f, 0x67, 0x6e, 0x69, 0x74, 0x69,
	0x76, 0x65, 0x12, 0x27, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x62,
	0x6c, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x0b,
	0x75, 0x73, 0x65, 0x72, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x12, 0x29, 0x0a, 0x0d, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x45, 0x64,
	0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x0a, 0x61, 0x70, 0x6e, 0x5f, 0x73, 0x65,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x30, 0x52, 0x08, 0x61,
	0x70, 0x6e, 0x53, 0x65, 0x74, 0x49, 0x64, 0x12, 0x59, 0x0a, 0x0c, 0x73, 0x6b, 0x69, 0x70, 0x5f,
	0x34, 0x36, 0x34, 0x78, 0x6c, 0x61, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x61, 0x72, 0x72, 0x69,
	0x65, 0x72, 0x2e, 0x41, 0x70, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x58, 0x6c, 0x61, 0x74, 0x3a,
	0x14, 0x53, 0x4b, 0x49, 0x50, 0x5f, 0x34, 0x36, 0x34, 0x58, 0x4c, 0x41, 0x54, 0x5f, 0x44, 0x45,
	0x46, 0x41, 0x55, 0x4c, 0x54, 0x52, 0x0b, 0x73, 0x6b, 0x69, 0x70, 0x34, 0x36, 0x34, 0x78, 0x6c,
	0x61, 0x74, 0x22, 0x94, 0x01, 0x0a, 0x07, 0x41, 0x70, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x07,
	0x0a, 0x03, 0x41, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x46, 0x41, 0x55,
	0x4c, 0x54, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x4d, 0x53, 0x10, 0x02, 0x12, 0x08, 0x0a,
	0x04, 0x53, 0x55, 0x50, 0x4c, 0x10, 0x03, 0x12, 0x07, 0x0a, 0x03, 0x44, 0x55, 0x4e, 0x10, 0x04,
	0x12, 0x09, 0x0a, 0x05, 0x48, 0x49, 0x50, 0x52, 0x49, 0x10, 0x05, 0x12, 0x08, 0x0a, 0x04, 0x46,
	0x4f, 0x54, 0x41, 0x10, 0x06, 0x12, 0x07, 0x0a, 0x03, 0x49, 0x4d, 0x53, 0x10, 0x07, 0x12, 0x07,
	0x0a, 0x03, 0x43, 0x42, 0x53, 0x10, 0x08, 0x12, 0x06, 0x0a, 0x02, 0x49, 0x41, 0x10, 0x09, 0x12,
	0x0d, 0x0a, 0x09, 0x45, 0x4d, 0x45, 0x52, 0x47, 0x45, 0x4e, 0x43, 0x59, 0x10, 0x0a, 0x12, 0x08,
	0x0a, 0x04, 0x58, 0x43, 0x41, 0x50, 0x10, 0x0b, 0x12, 0x06, 0x0a, 0x02, 0x55, 0x54, 0x10, 0x0c,
	0x12, 0x07, 0x0a, 0x03, 0x52, 0x43, 0x53, 0x10, 0x0d, 0x22, 0x31, 0x0a, 0x08, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x06, 0x0a, 0x02, 0x49, 0x50, 0x10, 0x00, 0x12, 0x08, 0x0a,
	0x04, 0x49, 0x50, 0x56, 0x36, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x49, 0x50, 0x56, 0x34, 0x56,
	0x36, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x50, 0x50, 0x50, 0x10, 0x03, 0x22, 0x53, 0x0a, 0x04,
	0x58, 0x6c, 0x61, 0x74, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x4b, 0x49, 0x50, 0x5f, 0x34, 0x36, 0x34,
	0x58, 0x4c, 0x41, 0x54, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x00, 0x12, 0x18,
	0x0a, 0x14, 0x53, 0x4b, 0x49, 0x50, 0x5f, 0x34, 0x36, 0x34, 0x58, 0x4c, 0x41, 0x54, 0x5f, 0x44,
	0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x4b, 0x49, 0x50,
	0x5f, 0x34, 0x36, 0x34, 0x58, 0x4c, 0x41, 0x54, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10,
	0x02, 0x4a, 0x04, 0x08, 0x15, 0x10, 0x16, 0x22, 0x42, 0x0a, 0x0b, 0x43, 0x61, 0x72, 0x72, 0x69,
	0x65, 0x72, 0x41, 0x70, 0x6e, 0x73, 0x12, 0x2d, 0x0a, 0x03, 0x61, 0x70, 0x6e, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x2e, 0x41, 0x70, 0x6e, 0x49, 0x74, 0x65, 0x6d,
	0x52, 0x03, 0x61, 0x70, 0x6e, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x22, 0x1f, 0x0a, 0x09, 0x54,
	0x65, 0x78, 0x74, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x22, 0x1e, 0x0a, 0x08,
	0x49, 0x6e, 0x74, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x22, 0xe4, 0x03, 0x0a,
	0x0d, 0x43, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x40,
	0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x61, 0x72, 0x72,
	0x69, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x1a, 0x84, 0x03, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x1f, 0x0a,
	0x0a, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x09, 0x74, 0x65, 0x78, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1d,
	0x0a, 0x09, 0x69, 0x6e, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x00, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a,
	0x0a, 0x6c, 0x6f, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x48, 0x00, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f,
	0x0a, 0x0a, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x00, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x3e, 0x0a, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x41, 0x72, 0x72,
	0x61, 0x79, 0x48, 0x00, 0x52, 0x09, 0x74, 0x65, 0x78, 0x74, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12,
	0x3b, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x74, 0x41, 0x72, 0x72, 0x61, 0x79,
	0x48, 0x00, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x3b, 0x0a, 0x06,
	0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65,
	0x72, 0x2e, 0x43, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48,
	0x00, 0x52, 0x06, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x64, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x48,
	0x00, 0x52, 0x0b, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x07,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x4a, 0x04, 0x08,
	0x03, 0x10, 0x04, 0x22, 0x45, 0x0a, 0x12, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x2a, 0x05, 0x08, 0x64, 0x10, 0x89, 0x27, 0x22, 0x55, 0x0a, 0x0d, 0x56, 0x65,
	0x6e, 0x64, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0x3e, 0x0a, 0x06, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72,
	0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x52, 0x06, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4a, 0x04, 0x08, 0x01, 0x10,
	0x02, 0x42, 0x19, 0x42, 0x15, 0x43, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x50, 0x01,
}

var (
	file_carrier_settings_proto_rawDescOnce sync.Once
	file_carrier_settings_proto_rawDescData = file_carrier_settings_proto_rawDesc
)

func file_carrier_settings_proto_rawDescGZIP() []byte {
	file_carrier_settings_proto_rawDescOnce.Do(func() {
		file_carrier_settings_proto_rawDescData = protoimpl.X.CompressGZIP(file_carrier_settings_proto_rawDescData)
	})
	return file_carrier_settings_proto_rawDescData
}

var file_carrier_settings_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_carrier_settings_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_carrier_settings_proto_goTypes = []any{
	(ApnItem_ApnType)(0),         // 0: com.google.carrier.ApnItem.ApnType
	(ApnItem_Protocol)(0),        // 1: com.google.carrier.ApnItem.Protocol
	(ApnItem_Xlat)(0),            // 2: com.google.carrier.ApnItem.Xlat
	(*CarrierSettings)(nil),      // 3: com.google.carrier.CarrierSettings
	(*MultiCarrierSettings)(nil), // 4: com.google.carrier.MultiCarrierSettings
	(*ApnItem)(nil),              // 5: com.google.carrier.ApnItem
	(*CarrierApns)(nil),          // 6: com.google.carrier.CarrierApns
	(*TextArray)(nil),            // 7: com.google.carrier.TextArray
	(*IntArray)(nil),             // 8: com.google.carrier.IntArray
	(*CarrierConfig)(nil),        // 9: com.google.carrier.CarrierConfig
	(*VendorConfigClient)(nil),   // 10: com.google.carrier.VendorConfigClient
	(*VendorConfigs)(nil),        // 11: com.google.carrier.VendorConfigs
	(*CarrierConfig_Config)(nil), // 12: com.google.carrier.CarrierConfig.Config
}
var file_carrier_settings_proto_depIdxs = []int32{
	6,  // 0: com.google.carrier.CarrierSettings.apns:type_name -> com.google.carrier.CarrierApns
	9,  // 1: com.google.carrier.CarrierSettings.configs:type_name -> com.google.carrier.CarrierConfig
	11, // 2: com.google.carrier.CarrierSettings.vendor_configs:type_name -> com.google.carrier.VendorConfigs
	3,  // 3: com.google.carrier.MultiCarrierSettings.setting:type_name -> com.google.carrier.CarrierSettings
	0,  // 4: com.google.carrier.ApnItem.type:type_name -> com.google.carrier.ApnItem.ApnType
	1,  // 5: com.google.carrier.ApnItem.protocol:type_name -> com.google.carrier.ApnItem.Protocol
	1,  // 6: com.google.carrier.ApnItem.roaming_protocol:type_name -> com.google.carrier.ApnItem.Protocol
	2,  // 7: com.google.carrier.ApnItem.skip_464xlat:type_name -> com.google.carrier.ApnItem.Xlat
	5,  // 8: com.google.carrier.CarrierApns.apn:type_name -> com.google.carrier.ApnItem
	12, // 9: com.google.carrier.CarrierConfig.config:type_name -> com.google.carrier.CarrierConfig.Config
	10, // 10: com.google.carrier.VendorConfigs.client:type_name -> com.google.carrier.VendorConfigClient
	7,  // 11: com.google.carrier.CarrierConfig.Config.text_array:type_name -> com.google.carrier.TextArray
	8,  // 12: com.google.carrier.CarrierConfig.Config.int_array:type_name -> com.google.carrier.IntArray
	9,  // 13: com.google.carrier.CarrierConfig.Config.bundle:type_name -> com.google.carrier.CarrierConfig
	14, // [14:14] is the sub-list for method output_type
	14, // [14:14] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_carrier_settings_proto_init() }
func file_carrier_settings_proto_init() {
	if File_carrier_settings_proto != nil {
		return
	}
	file_carrier_settings_proto_msgTypes[9].OneofWrappers = []any{
		(*CarrierConfig_Config_TextValue)(nil),
		(*CarrierConfig_Config_IntValue)(nil),
		(*CarrierConfig_Config_LongValue)(nil),
		(*CarrierConfig_Config_BoolValue)(nil),
		(*CarrierConfig_Config_TextArray)(nil),
		(*CarrierConfig_Config_IntArray)(nil),
		(*CarrierConfig_Config_Bundle)(nil),
		(*CarrierConfig_Config_DoubleValue)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_carrier_settings_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_carrier_settings_proto_goTypes,
		DependencyIndexes: file_carrier_settings_proto_depIdxs,
		EnumInfos:         file_carrier_settings_proto_enumTypes,
		MessageInfos:      file_carrier_settings_proto_msgTypes,
	}.Build()
	File_carrier_settings_proto = out.File
	file_carrier_settings_proto_rawDesc = nil
	file_carrier_settings_proto_goTypes = nil
	file_carrier_settings_proto_depIdxs = nil
}
